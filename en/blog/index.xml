<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>TECH-NI Blog</title>
		<link>http://tech.nitoyon.com/en/blog/index.xml</link>
		<description>All Technology is Boiled in This Site.</description>
		<language>en</language>
		<copyright>Copyright nitoyon.</copyright>
		<lastBuildDate>Tue, 09 Nov 2021 10:07:36 +0000</lastBuildDate>
		<docs>http://blogs.law.harvard.edu/tech/rss</docs>
		<atom:link href="http://tech.nitoyon.com/en/blog/index.xml" rel="self" type="application/rss+xml" />


		<item>
			<title>Japanese-English translation table of Game Builder Garage</title>
			<link>http://tech.nitoyon.com/en/blog/2021/11/10/game-builder-garage-glossary/</link>
			<guid>http://tech.nitoyon.com/en/blog/2021/11/10/game-builder-garage-glossary/</guid>
			<pubDate>Wed, 10 Nov 2021 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>I have summarized the terms of &quot;Game Builder Garage for Nintendo Switch&quot; in a Japanese-English translation table.</p>

<p>I referred to the following pages, but neither was perfect. So in the end, I summarized this table by checking my Switch.</p>

<ul>
<li><a href="https://www.nintendo.co.jp/switch/awuxa/reference/contents/index.html">ナビつき！ つくってわかる　はじめてゲームプログラミング：ノードン機能一覧 | Nintendo Switch | 任天堂</a></li>
<li><a href="https://game-builder-garage.fandom.com/wiki/Nodon">Nodon | Game Builder Garage Wiki | Fandom</a></li>
</ul>

<h1>Basic Terms</h1>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>ナビつき! つくってわかる はじめてゲームプログラミング</td>
<td>Game Builder Garage</td>
</tr>
<tr>
<td>ノードン</td>
<td>Nodon</td>
</tr>
<tr>
<td>ナビつきレッスン</td>
<td>Interactive Lessons</td>
</tr>
<tr>
<td>フリープログラミング</td>
<td>Free Programming</td>
</tr>
<tr>
<td>ノードンガイド</td>
<td>Alice&#39;s Guide</td>
</tr>
</tbody></table>

<p>The following is a summary of terms related to Nordon.</p>

<h1>入力 : Input</h1>

<h2>定数ノードン : Constant Nodon</h2>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>いくつを出力する？</td>
<td>Output Value</td>
</tr>
</tbody></table>

<h2>ボタンノードン : Button Nodon</h2>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>おしたか</td>
<td>If pressed</td>
</tr>
<tr>
<td>出力するタイミング (おしたしゅんかん / おしていたらずっと)</td>
<td>Output Timing (On press / While pressed)</td>
</tr>
<tr>
<td>コントローラーばんごう (じどう)</td>
<td>Controller Number (Auto)</td>
</tr>
</tbody></table>

<h2>スティックノードン : Stick Nodon</h2>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>上下</td>
<td>Up/Down</td>
</tr>
<tr>
<td>左右</td>
<td>Left/Right</td>
</tr>
<tr>
<td>たおした量</td>
<td>Amount tilted</td>
</tr>
<tr>
<td>コントローラーばんごう (じどう)</td>
<td>Controller Number (Auto)</td>
</tr>
<tr>
<td>出力 (デジタル / アナログ)</td>
<td>Output (Digital / Analog)</td>
</tr>
<tr>
<td>はんい</td>
<td>Range</td>
</tr>
<tr>
<td>はんのうする方向</td>
<td>Direction of Response</td>
</tr>
<tr>
<td>どちらでも</td>
<td>Any</td>
</tr>
<tr>
<td>どちらのスティック？</td>
<td>Which Stick</td>
</tr>
</tbody></table>

<h2>タッチスクリーン : Touch Screen</h2>

<h3>タッチしたらノードン : If-Touched Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>タッチしたか</td>
<td>If touched</td>
</tr>
<tr>
<td>出力するタイミング (タッチしたしゅんかん / タッチしていたらずっと)</td>
<td>Output Timing (On touch / While touched)</td>
</tr>
<tr>
<td>どこをタッチしたときに出力する？ (このノードン / どこでも)</td>
<td>Touch Where to Output? (This Nodon / Anywhere)</td>
</tr>
</tbody></table>

<h3>タッチ位置ノードン : Touch-Position Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>Y</td>
<td>Y</td>
</tr>
</tbody></table>

<h2>モーション : Motion</h2>

<h3>ふりノードン : Shake Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>ふりの勢い</td>
<td>Momentum</td>
</tr>
<tr>
<td>どれをチェックする？ (じどう)</td>
<td>Check What? (Auto)</td>
</tr>
<tr>
<td>コントローラーばんごう</td>
<td>Controller Number</td>
</tr>
<tr>
<td>出力 (デジタル / アナログ)</td>
<td>Output (Digital / Analog)</td>
</tr>
<tr>
<td>はんい</td>
<td>Range</td>
</tr>
<tr>
<td>はんのうする方向 (どちらでも)</td>
<td>Direction of Response (Any Direction)</td>
</tr>
</tbody></table>

<h3>かたむきノードン : Tilt Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>Yリセット</td>
<td>Y reset</td>
</tr>
<tr>
<td>かたむき角度</td>
<td>Tilt angle</td>
</tr>
<tr>
<td>どれをチェックする？</td>
<td>Check What?</td>
</tr>
<tr>
<td>コントローラーばんごう</td>
<td>Controller Number</td>
</tr>
<tr>
<td>出力 (デジタル / アナログ)</td>
<td>Output (Digital / Analog)</td>
</tr>
<tr>
<td>はんい</td>
<td>Range</td>
</tr>
<tr>
<td>回転軸</td>
<td>Axis of Rotation</td>
</tr>
<tr>
<td>モード (かたむき / 回転角度)</td>
<td>Mode (Tilt / Angle of rotation)</td>
</tr>
</tbody></table>

<h3>オモテ面が上を向いたらノードン : If-Face-Up Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>上向き量</td>
<td>Facing up</td>
</tr>
<tr>
<td>どれをチェックする？</td>
<td>Check What?</td>
</tr>
<tr>
<td>コントローラーばんごう</td>
<td>Controller Number</td>
</tr>
<tr>
<td>出力 (デジタル / アナログ)</td>
<td>Output (Digital / Analog)</td>
</tr>
<tr>
<td>はんい</td>
<td>Range</td>
</tr>
<tr>
<td>オモテとする面 (左 / 右 / 前 / 後 / 上 / 下)</td>
<td>Which Side Should Face Up? (Left/ Right / Front / Back / Top / Bottom)</td>
</tr>
</tbody></table>

<h3>回転速度ノードン : Rotation-Speed Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>まわした速さ</td>
<td>Rotation speed</td>
</tr>
<tr>
<td>どれをチェックする？</td>
<td>Check What?</td>
</tr>
<tr>
<td>コントローラーばんごう</td>
<td>Controller Number</td>
</tr>
<tr>
<td>出力 (デジタル / アナログ)</td>
<td>Output (Digital / Analog)</td>
</tr>
<tr>
<td>はんい</td>
<td>Range</td>
</tr>
<tr>
<td>回転軸 (X / Y / Z / どちらでも)</td>
<td>Axis of Rotation (X / Y / Z / Any)</td>
</tr>
<tr>
<td>はんのうする方向 (＋ / － / ±)</td>
<td>Direction of Response ( + / - / +/-)</td>
</tr>
</tbody></table>

<h3>モーションIRカメラノードン : IR Motion Camera Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>うつった数</td>
<td>Captured portions</td>
</tr>
<tr>
<td>コントローラーばんごう</td>
<td>Controller Number</td>
</tr>
<tr>
<td>にんしきキョリ (赤外線オフ / ちかくだけ / ふつう / とおくまで)</td>
<td>Distance to Recognize (IR off / Near / Normal / Near &amp; far)</td>
</tr>
</tbody></table>

<h2>ゲーム内の変化 : State Change</h2>

<h3>モノがこわれたしゅんかんノードン : Object-Break Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>こわれた数</td>
<td>Broken count</td>
</tr>
<tr>
<td>何をチェックする？</td>
<td>Check What?</td>
</tr>
</tbody></table>

<h3>スタートしたしゅんかんノードン : On-Start Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>スタートしたか</td>
<td>If started</td>
</tr>
</tbody></table>

<h1>中間 : Middle</h1>

<h2>けいさんノードン : Calculator Nodon</h2>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>入力１</td>
<td>Input 1</td>
</tr>
<tr>
<td>入力２</td>
<td>Input 2</td>
</tr>
<tr>
<td>けいさん結果</td>
<td>Result</td>
</tr>
<tr>
<td>けいさん方法</td>
<td>Calculation Method</td>
</tr>
<tr>
<td>＋</td>
<td>＋</td>
</tr>
<tr>
<td>－</td>
<td>－</td>
</tr>
<tr>
<td>×</td>
<td>×</td>
</tr>
<tr>
<td>÷</td>
<td>÷</td>
</tr>
</tbody></table>

<h2>へんかん : Convert</h2>

<h3>マッピングノードン : Map Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>入力</td>
<td>Input</td>
</tr>
<tr>
<td>出力</td>
<td>Output</td>
</tr>
<tr>
<td>入力はんい</td>
<td>Input Range</td>
</tr>
<tr>
<td>出力はんい</td>
<td>Output Range</td>
</tr>
<tr>
<td>はんい制限 (はんい制限する / はんい制限しない)</td>
<td>Range Restriction (Enable / Disable)</td>
</tr>
</tbody></table>

<h3>デジタル化ノードン : Digitize Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>入力</td>
<td>Input</td>
</tr>
<tr>
<td>出力</td>
<td>Output</td>
</tr>
<tr>
<td>1.00 をいくつにわける？</td>
<td>Number of Stages</td>
</tr>
</tbody></table>

<h3>ルートノードン : Square-Root Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>入力</td>
<td>Input</td>
</tr>
<tr>
<td>出力</td>
<td>Output</td>
</tr>
</tbody></table>

<h3>絶対値ノードン : Absolute-Value Nodon</h3>

<p>Same as square-root nodon.</p>

<h3>＋－反転 : +− Inversion Nodon</h3>

<p>Same as square-root nodon.</p>

<h3>０から変わったしゅんかんノードン : Trigger-from-0 Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>入力</td>
<td>Input</td>
</tr>
<tr>
<td>変わったか</td>
<td>If changed</td>
</tr>
</tbody></table>

<h2>角度のけいさん : Angle Calculation</h2>

<h3>位置を角度にノードン : Position → Angle Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>横位置</td>
<td>Horizontal position</td>
</tr>
<tr>
<td>縦位置</td>
<td>Vertical position</td>
</tr>
<tr>
<td>角度</td>
<td>Angle</td>
</tr>
</tbody></table>

<h3>角度を位置にノードン : Position → Angle Nodon</h3>

<p>Same as position → angle nodon.</p>

<h3>角度の差ノードン : Angle-Difference Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>角度１</td>
<td>Angle 1</td>
</tr>
<tr>
<td>角度２</td>
<td>Angle 2</td>
</tr>
<tr>
<td>差</td>
<td>Difference</td>
</tr>
</tbody></table>

<h2>くらべるノードン : Comparison Nodon</h2>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>入力１</td>
<td>Input 1</td>
</tr>
<tr>
<td>入力２</td>
<td>Input 2</td>
</tr>
<tr>
<td>くらべた結果</td>
<td>Result</td>
</tr>
<tr>
<td>どうやってくらべる？ (= / &gt; / &lt; / ≧ / ≦)</td>
<td>Comparison Method (= / &gt; / &lt; / ≥ / ≤)</td>
</tr>
</tbody></table>

<h2>ロジック : Logic</h2>

<h3>AND ノードン : AND Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>入力１</td>
<td>Input 1</td>
</tr>
<tr>
<td>入力２</td>
<td>Input 2</td>
</tr>
<tr>
<td>出力</td>
<td>Output</td>
</tr>
</tbody></table>

<h3>NOT ノードン : NOT Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>入力</td>
<td>Input</td>
</tr>
<tr>
<td>出力</td>
<td>Output</td>
</tr>
</tbody></table>

<h2>フラグ・カウンター・ランダム : Flag/Counter/Random</h2>

<h3>フラグノードン : Flag Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>オン</td>
<td>On</td>
</tr>
<tr>
<td>オフ</td>
<td>Off</td>
</tr>
<tr>
<td>フラグがオンか</td>
<td>Flag is on</td>
</tr>
</tbody></table>

<h3>カウンターノードン : Counter Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>増やす</td>
<td>Count up</td>
</tr>
<tr>
<td>減らす</td>
<td>Count down</td>
</tr>
<tr>
<td>リセット</td>
<td>Reset</td>
</tr>
<tr>
<td>カウント</td>
<td>Count</td>
</tr>
<tr>
<td>スタートのときのカウント</td>
<td>Starting Value</td>
</tr>
<tr>
<td>モード (制限なし / はんい制限 / ループ / おうふく))</td>
<td>Mode (No limit /Count range Loop / Bounce)</td>
</tr>
<tr>
<td>カウントはんい</td>
<td>Count Range</td>
</tr>
<tr>
<td>カウントするタイミング (０から変わったしゅんかん / ０以外のときずっと)</td>
<td>Count Timing (On change from 0 / While not 0)</td>
</tr>
</tbody></table>

<h3>ランダムノードン : Random Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>？</td>
<td>?</td>
</tr>
<tr>
<td>リセット</td>
<td>Reset</td>
</tr>
<tr>
<td>ランダムな数</td>
<td>Random number</td>
</tr>
<tr>
<td>数を更新するタイミング  (０から変わったしゅんかん / ０以外のときずっと)</td>
<td>Update Timing (On change from 0 / While not 0)</td>
</tr>
<tr>
<td>出力はんい</td>
<td>Output Range</td>
</tr>
</tbody></table>

<h2>タイマーノードン : Timer Nodon</h2>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>入力</td>
<td>Input</td>
</tr>
<tr>
<td>出力</td>
<td>Output</td>
</tr>
<tr>
<td>何秒後に出力するか</td>
<td>Output after How Many Seconds?</td>
</tr>
<tr>
<td>出力しつづける秒数</td>
<td>Continue Output for How Long?</td>
</tr>
</tbody></table>

<h2>スポイトノードン : Bull&#39;s-Eye Nodon</h2>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>マーカー量</td>
<td>Marker amount</td>
</tr>
<tr>
<td>出力 (デジタル / アナログ)</td>
<td>Output (Digital / Analog)</td>
</tr>
<tr>
<td>はんい</td>
<td>Range</td>
</tr>
<tr>
<td>スポイントのかたち (円 / 長方形)</td>
<td>Bull&#39;s-Eye Shape (Circle / Rectangle)</td>
</tr>
</tbody></table>

<h2>プログラムのせいり : Program Layout</h2>

<h3>ワイヤーワープ入口ノードン : Wormhole-Entrance Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>入口</td>
<td>Entrance</td>
</tr>
<tr>
<td>ワープID</td>
<td>Wormhole ID</td>
</tr>
</tbody></table>

<h3>ワイヤーワープ出口ノードン : Wormhole-Exit Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>出口</td>
<td>Exit</td>
</tr>
<tr>
<td>ワープID</td>
<td>Wormhole ID</td>
</tr>
</tbody></table>

<h3>自分メモノードン : Comment Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>自分メモ</td>
<td>Comment</td>
</tr>
</tbody></table>

<h1>出力 : Output</h1>

<h2>音をならすノードン : Play-Sound Nodon</h2>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>効果音を鳴らす</td>
<td>Play SFX</td>
</tr>
<tr>
<td>楽器を鳴らす</td>
<td>Play Instrument</td>
</tr>
<tr>
<td>再生</td>
<td>Play</td>
</tr>
<tr>
<td>音量</td>
<td>Volume</td>
</tr>
<tr>
<td>高さ</td>
<td>Pitch</td>
</tr>
<tr>
<td>鳴らす音</td>
<td>Sound Played</td>
</tr>
</tbody></table>

<h2>BGMノードン : Background-Music Nodon</h2>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>効果音を鳴らす</td>
<td>Play SFX</td>
</tr>
<tr>
<td>楽器を鳴らす</td>
<td>Play Instrument</td>
</tr>
<tr>
<td>再生</td>
<td>Play</td>
</tr>
<tr>
<td>音量</td>
<td>Volume</td>
</tr>
<tr>
<td>高さ</td>
<td>Pitch</td>
</tr>
<tr>
<td>曲</td>
<td>Theme</td>
</tr>
<tr>
<td>メロディ</td>
<td>Melody</td>
</tr>
<tr>
<td>メイン伴奏</td>
<td>Main Accompaniment</td>
</tr>
<tr>
<td>サブ伴奏</td>
<td>Sub Accompaniment</td>
</tr>
<tr>
<td>リズム</td>
<td>Rhythm</td>
</tr>
</tbody></table>

<h2>しんどうノードン : Vibration Nodon</h2>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>しんどう強さ</td>
<td>Vibration strength</td>
</tr>
<tr>
<td>コントローラーばんごう</td>
<td>Controller Number</td>
</tr>
<tr>
<td>どっちのコントローラー？</td>
<td>Which Controller</td>
</tr>
<tr>
<td>出力しつづける秒数</td>
<td>Continue Output for How Long?</td>
</tr>
<tr>
<td>周波数</td>
<td>Frequency</td>
</tr>
</tbody></table>

<h2>ワールドを変化 : Change World</h2>

<h3>重力をへらすノードン : Reduce-Gravity Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>へらす量</td>
<td>Reduction</td>
</tr>
</tbody></table>

<h3>時間を止めるノードン : Slow-Time Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>止める量</td>
<td>Slowdown amount</td>
</tr>
</tbody></table>

<h2>リトライ・おわる・きりかえ : Retry/End/Swap</h2>

<h3>リトライノードン : Retry Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>リトライ</td>
<td>Retry</td>
</tr>
<tr>
<td>ワイプのみため (ふつう / まばたき / まんまる)</td>
<td>Transition Effect (Default / Blink / Shot)</td>
</tr>
</tbody></table>

<h3>ゲームおわるノードン : End-Game Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>おわる</td>
<td>Exit</td>
</tr>
</tbody></table>

<h3>ゲームきりかえノードン : Swap-Game Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>きりかえる</td>
<td>Swap</td>
</tr>
<tr>
<td>きりかえ元より</td>
<td>Swap from value</td>
</tr>
<tr>
<td>きりかえ方法 (キーワード / きりかえ元へもどる)</td>
<td>Swap Type (Keyword / Back to previous)</td>
</tr>
<tr>
<td>きりかえ先のキーワード</td>
<td>Swap-Target Keyword</td>
</tr>
<tr>
<td>このゲームのキーワード</td>
<td>Game Keyword</td>
</tr>
<tr>
<td>きりかえのみため (タイトルあり / タイトルなし)</td>
<td>Transition Appearance (With title / Without title)</td>
</tr>
</tbody></table>

<h2>その他 : Other</h2>

<h3>マーカー表示ノードン : Marker-Display Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>入力</td>
<td>Input</td>
</tr>
<tr>
<td>表示方法 (動く / のびる / 線 / まわる / 円グラフ / 透明度 / 点滅)</td>
<td>Light Up How? (Move / Extend / Line / Rotate / Pie chart / Opacity / Flash)</td>
</tr>
<tr>
<td>スポイト反応 (スポイトできる / スポイトできない)</td>
<td>Activates Bull&#39;s-Eye Nodon? (Bull&#39;s-eye compatible / Bull&#39;s-eye incompatible)</td>
</tr>
</tbody></table>

<h3>2Dマーカー表示ノードン : 2D-Marker-Display Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>スポイト結果</td>
<td>Result</td>
</tr>
<tr>
<td>出力 (デジタル / アナログ)</td>
<td>Output (Digital / Analog)</td>
</tr>
<tr>
<td>はんい</td>
<td>Range</td>
</tr>
<tr>
<td>おおきさ</td>
<td>Size</td>
</tr>
<tr>
<td>スポイト反応 (スポイトできる / スポイトできない)</td>
<td>Activates Bull&#39;s-Eye Nodon? (Bull&#39;s-eye compatible / Bull&#39;s-eye incompatible)</td>
</tr>
</tbody></table>

<h3>ずっとマーカー表示ノードン : Continuous-Marker-Display Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>スポイト反応 (スポイトできる / スポイトできない)</td>
<td>Activates Bull&#39;s-Eye Nodon? (Bull&#39;s-eye compatible / Bull&#39;s-eye incompatible)</td>
</tr>
</tbody></table>

<h3>赤外線ライトをひからせるノードン : IR-Light Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>ひからせる</td>
<td>Light up</td>
</tr>
<tr>
<td>コントローラーばんごう</td>
<td>Controller Number</td>
</tr>
<tr>
<td>出力しつづける秒数</td>
<td>Continue Output for How Long?</td>
</tr>
</tbody></table>

<h1>モノ : Objects</h1>

<p>Common terms are listed here.</p>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>ふるまい</td>
<td>Properties</td>
</tr>
<tr>
<td>見える</td>
<td>Visible</td>
</tr>
<tr>
<td>当たる</td>
<td>Solid</td>
</tr>
<tr>
<td>動く</td>
<td>Movable</td>
</tr>
<tr>
<td>こわれる</td>
<td>Destructible</td>
</tr>
<tr>
<td>こわす</td>
<td>Destructive</td>
</tr>
<tr>
<td>その他</td>
<td>Other</td>
</tr>
<tr>
<td>当たった/こわれたときに音を鳴らす？ (鳴らす / 鳴らさない)</td>
<td>Play Sound When Hit/Destroyed? (Play / Don&#39;t Play)</td>
</tr>
<tr>
<td>てノードンでつかめる？ (つかめる / つかめない)</td>
<td>Can Be Grabbed by Hand Nodon? (Can be grabbed / Can&#39;t be grabbed)</td>
</tr>
<tr>
<td>そざい (ふつう / ポヨポヨ / ツルツル / ふわふわ / 無重力)</td>
<td>Material (Normal / Bouncy / Slippery / Floaty / Zero gravity)</td>
</tr>
<tr>
<td>れんけつかたさ (ふつう / バネバネ / 180°回転)</td>
<td>Connection Type (Normal / Springy / 180° Rotation)</td>
</tr>
<tr>
<td>れんけつ面 (じどう / くわしく)</td>
<td>Connection Point (Auto / Manual)</td>
</tr>
<tr>
<td>自分のれんけつ面 (じどう)</td>
<td>Own Connection Point (Auto)</td>
</tr>
<tr>
<td>れんけつ先の面 (じどう)</td>
<td>Own Connection Point (Auto)</td>
</tr>
<tr>
<td>いどうきじゅん (ワールド / ローカル / カメラ)</td>
<td>Frame of Reference for Motion (World / Local / Camera)</td>
</tr>
<tr>
<td>いどうスピード</td>
<td>Movement Speed</td>
</tr>
<tr>
<td>ジャンプ力</td>
<td>Jump Strength</td>
</tr>
<tr>
<td>おおきさ</td>
<td>Size</td>
</tr>
<tr>
<td>位置</td>
<td>Position</td>
</tr>
<tr>
<td>回転</td>
<td>Rotation</td>
</tr>
</tbody></table>

<h2>キャラクター : Characters</h2>

<h3>ヒトノードン : Person Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>前後</td>
<td>⬍Forward/Backward</td>
</tr>
<tr>
<td>左右</td>
<td>⬌Left/Right</td>
</tr>
<tr>
<td>ジャンプ</td>
<td>Jump</td>
</tr>
<tr>
<td>アクション</td>
<td>Action</td>
</tr>
<tr>
<td>やったぜ</td>
<td>Celebrate</td>
</tr>
<tr>
<td>パンチ</td>
<td>Punch</td>
</tr>
<tr>
<td>キック</td>
<td>Kick</td>
</tr>
<tr>
<td>ターン</td>
<td>Turn</td>
</tr>
<tr>
<td>せんかい速度</td>
<td>Turning Speed</td>
</tr>
</tbody></table>

<h3>クルマノードン : Car Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>アクセル</td>
<td>⬍Accelerate</td>
</tr>
<tr>
<td>ハンドル</td>
<td>⬌Steering wheel</td>
</tr>
<tr>
<td>ジャンプ</td>
<td>Jump</td>
</tr>
</tbody></table>

<h3>UFOノードン : UFO Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>前後</td>
<td>⬍Forward/Backward</td>
</tr>
<tr>
<td>左右</td>
<td>⬌Left/Right</td>
</tr>
<tr>
<td>上下</td>
<td>⬍Up/Down</td>
</tr>
<tr>
<td>水平スピード</td>
<td>Horizontal Speed</td>
</tr>
<tr>
<td>上下スピード</td>
<td>Vertical Speed</td>
</tr>
</tbody></table>

<h2>モノノードン : Object Nodon</h2>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>モノのかたち (直方体 / 円柱 / 球)</td>
<td>Object Shape (Box / Cylinder / Sphere)</td>
</tr>
</tbody></table>

<h2>オシャレなモノノードン : Fancy-Object Nodon</h2>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>しかくいオシャレ</td>
<td>Rectangular Fancy Objects</td>
</tr>
<tr>
<td>ハコ</td>
<td>Crate</td>
</tr>
<tr>
<td>コンテナ</td>
<td>Shipping Container</td>
</tr>
<tr>
<td>サイコロ</td>
<td>Dice</td>
</tr>
<tr>
<td>パネル</td>
<td>Panel</td>
</tr>
<tr>
<td>たからばこ</td>
<td>Treasure Chest</td>
</tr>
<tr>
<td>テレビ</td>
<td>Television</td>
</tr>
<tr>
<td>Joy-Con (R)</td>
<td>Joy-Con (R)</td>
</tr>
<tr>
<td>Joy-Con (L)</td>
<td>Joy-Con (L)</td>
</tr>
<tr>
<td>まるいオシャレ</td>
<td>Round Fancy Objects</td>
</tr>
<tr>
<td>サッカーボール</td>
<td>Soccer Ball</td>
</tr>
<tr>
<td>ゴルフボール</td>
<td>Golf Ball</td>
</tr>
<tr>
<td>ふうせん</td>
<td>Balloon</td>
</tr>
<tr>
<td>リンゴ</td>
<td>Apple</td>
</tr>
<tr>
<td>カブ</td>
<td>Turnip</td>
</tr>
<tr>
<td>サカナ</td>
<td>Fish</td>
</tr>
<tr>
<td>けだまる</td>
<td>Fluffball</td>
</tr>
<tr>
<td>エイリアン</td>
<td>Alien</td>
</tr>
<tr>
<td>えんちゅうなオシャレ</td>
<td>Cylindrical Fancy Objects</td>
</tr>
<tr>
<td>おじさん</td>
<td>Traveler</td>
</tr>
<tr>
<td>チアリーダー</td>
<td>Cheerleader</td>
</tr>
<tr>
<td>ダイバー</td>
<td>Diver</td>
</tr>
<tr>
<td>にんぎょ</td>
<td>Mermaid</td>
</tr>
<tr>
<td>ロボット</td>
<td>Robot</td>
</tr>
<tr>
<td>まじょ</td>
<td>Sorceress</td>
</tr>
<tr>
<td>ゆきおとこ</td>
<td>Yeti</td>
</tr>
<tr>
<td>スモウレスラー</td>
<td>Sumo Wrestler</td>
</tr>
<tr>
<td>いろんなオシャレ</td>
<td>Other Fancy Objects</td>
</tr>
<tr>
<td>リング</td>
<td>Hoop</td>
</tr>
<tr>
<td>やじるし</td>
<td>Arrow</td>
</tr>
<tr>
<td>ミサイル</td>
<td>Rocket</td>
</tr>
<tr>
<td>えんぴつ</td>
<td>Pencil</td>
</tr>
<tr>
<td>マグロ</td>
<td>Tuna</td>
</tr>
<tr>
<td>ヒヨコ</td>
<td>Chick</td>
</tr>
<tr>
<td>カバ</td>
<td>Hippo</td>
</tr>
<tr>
<td>くまちゃん</td>
<td>Bear</td>
</tr>
</tbody></table>

<h2>とくしゅなモノ : Special Objects</h2>

<h3>うごかせるモノノードン : Moving-Object Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>Z</td>
<td>Z</td>
</tr>
<tr>
<td>モード (加速度 / 速度)</td>
<td>Mode (Acceleration / Speed)</td>
</tr>
</tbody></table>

<h3>まわせるモノノードン : Rotating-Object Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>X軸</td>
<td>X-axis</td>
</tr>
<tr>
<td>Y軸</td>
<td>Y-axis</td>
</tr>
<tr>
<td>Z軸</td>
<td>Z-axis</td>
</tr>
</tbody></table>

<h3>のばせるモノノードン : Extending-Object Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>Z</td>
<td>Z</td>
</tr>
</tbody></table>

<h3>エフェクトノードン : Effect Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>出す</td>
<td>Trigger</td>
</tr>
<tr>
<td>みため (はなび / ばくはつ / しゃぼんだま / けむり / クラッカー / ダメージ / 3カウント / しっぱい / ライト)</td>
<td>Appearance (Fireworks / Explosion / Bubbles / Smoke / Party Popper / Damage / Countdown / Failure / Light)</td>
</tr>
<tr>
<td>エフェクトを出すタイミング (０から変わったしゅんかん / ０以外のときずっと)</td>
<td>Effect Timing (On change from 0 / While not 0)</td>
</tr>
<tr>
<td>エフェクトが出る位置 (カメラ / ワールド)</td>
<td>Effect Location (Camera / World)</td>
</tr>
</tbody></table>

<h3>ことばつきモノノードン : Text-Object Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>表示することば</td>
<td>Display Text</td>
</tr>
<tr>
<td>もじのいろ</td>
<td>Text Color</td>
</tr>
<tr>
<td>表示方向</td>
<td>Text Display Side</td>
</tr>
</tbody></table>

<h3>数つきモノノードン : Number-Object Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>数</td>
<td>Number</td>
</tr>
<tr>
<td>もじのいろ</td>
<td>Text Color</td>
</tr>
<tr>
<td>表示方向</td>
<td>Text Display Side</td>
</tr>
<tr>
<td>整数ケタ</td>
<td>Whole Number Digits</td>
</tr>
<tr>
<td>小数ケタ</td>
<td>Decimal Digits</td>
</tr>
</tbody></table>

<h3>テクスチャノードン : Texture Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>見える</td>
<td>Visible</td>
</tr>
<tr>
<td>貼りつける面</td>
<td>Texture Face</td>
</tr>
</tbody></table>

<h2>センサー : Sensors</h2>

<p>Common terms are listed here.</p>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>センサーのかたち (直方体 / 円柱 / 球)</td>
<td>Seonsor Shape (Box / Cylinder / Sphere)</td>
</tr>
<tr>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>Z</td>
<td>Z</td>
</tr>
<tr>
<td>X軸</td>
<td>X-axis</td>
</tr>
<tr>
<td>Y軸</td>
<td>Y-axis</td>
</tr>
<tr>
<td>Z軸</td>
<td>Z-axis</td>
</tr>
</tbody></table>

<h3>さわっているセンサーノードン : Touch-Sensor Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>さわっている数</td>
<td>Touching count</td>
</tr>
<tr>
<td>出力するタイミング (さわったしゅんかん / さわっていたらずっと)</td>
<td>Output Timing (On touch / While touched)</td>
</tr>
<tr>
<td>何をチェックする？</td>
<td>Check What?</td>
</tr>
</tbody></table>

<h3>こわしたしゅんかんセンサーノードン : Destroying-Sensor Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>こわした数</td>
<td>Broken count</td>
</tr>
</tbody></table>

<h3>こわれているセンサーノードン : Destroyed-Sensor Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>こわれているか</td>
<td>If broken</td>
</tr>
</tbody></table>

<h3>つかまれているセンサーノードン : Grabbed-Sensor Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>つかまれているか</td>
<td>If grabbed</td>
</tr>
<tr>
<td>出力するタイミング (つかまれたしゅんかん / つかまれていたらずっと)</td>
<td>Output Timing (On grip / While gripped)</td>
</tr>
</tbody></table>

<h3>位置センサーノードン : Location-Sensor Nodon</h3>

<p>Only common terms.</p>

<h3>速度センサーノードン : Speed-Sensor Nodon</h3>

<p>Only common terms.</p>

<h3>加速度センサーノードン : Acceleration-Sensor Nodon</h3>

<p>Only common terms.</p>

<h3>角度センサーノードン : Angle-Sensor Nodon</h3>

<p>Only common terms.</p>

<h3>回転速度センサーノードン : Rotation-Speed-Sensor Nodon</h3>

<p>Only common terms.</p>

<h2>れんけつパーツ : Connections</h2>

<h3>スライドれんけつノードン : Slide-Connector Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>スライド量</td>
<td>Slide amount</td>
</tr>
<tr>
<td>スライドのいどうきじゅん (X / Y / Z)</td>
<td>Slide Axis (X / Y / Z)</td>
</tr>
<tr>
<td>はんい</td>
<td>Range</td>
</tr>
</tbody></table>

<h3>フリースライドれんけつノードン : Free-Slide-Connector Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>スライドのいどう入力 (X / Y / Z)</td>
<td>Slide Motion Input (X / Y / Z)</td>
</tr>
</tbody></table>

<h3>ヒンジれんけつノードン : Hinge-Connector Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>まわす量</td>
<td>Rotation amount</td>
</tr>
<tr>
<td>ヒンジの回転きじゅん (X / Y / Z)</td>
<td>Axis of Rotation (X / Y / Z)</td>
</tr>
<tr>
<td>はんい</td>
<td>Range</td>
</tr>
</tbody></table>

<h3>ヒモれんけつノードン : String-Connector Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>ヒモのかたさ</td>
<td>String Stiffness</td>
</tr>
<tr>
<td>ヒモのながさ</td>
<td>String Length</td>
</tr>
</tbody></table>

<h2>だす・けす・引力 : Launch/Destroy/Attract</h2>

<h3>モノを発射ノードン : Launch-Object Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>発射</td>
<td>Launch</td>
</tr>
<tr>
<td>発射方向</td>
<td>Launch Direction</td>
</tr>
<tr>
<td>発射スピード</td>
<td>Launch Speed</td>
</tr>
<tr>
<td>発射間隔</td>
<td>Launch Interval</td>
</tr>
</tbody></table>

<h3>モノをこわすノードン : Destroy-Object Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>こわす</td>
<td>Destroy</td>
</tr>
<tr>
<td>何をこわす？</td>
<td>Destroy What?</td>
</tr>
</tbody></table>

<h3>モノワープ入口ノードン : Teleport-Object-Entrance Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>ワープ</td>
<td>Teleport</td>
</tr>
<tr>
<td>ワープID</td>
<td>Teleport ID</td>
</tr>
<tr>
<td>何をワープする？</td>
<td>Teleport What?</td>
</tr>
</tbody></table>

<h3>モノワープ出口ノードン : Teleport-Object-Exit Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>ワープID</td>
<td>Teleport ID</td>
</tr>
<tr>
<td>ワープしせい (そのまま / リセット)</td>
<td>Teleport Physics (Preserve / Reset)</td>
</tr>
<tr>
<td>発射方向</td>
<td>Launch Direction</td>
</tr>
<tr>
<td>発射スピード</td>
<td>Launch Speed</td>
</tr>
<tr>
<td>発射間隔</td>
<td>Launch Interval</td>
</tr>
</tbody></table>

<h3>引力ノードン : Attract-Object Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>力</td>
<td>Force</td>
</tr>
<tr>
<td>引力位置</td>
<td>Center of Attraction</td>
</tr>
<tr>
<td>何を引きよせる？</td>
<td>Attract Which Objects?</td>
</tr>
</tbody></table>

<h2>ワールドノードン : World Nodon</h2>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>ワールドのかたち (なし / 球 / ユカ / ドーム / 直方体/円柱)</td>
<td>World Shape (None / Plane / Dome / Cubold / Cylinder / Sphere)</td>
</tr>
<tr>
<td>ワールドのみため (ふつう / しばふ / タイル / きんぞく / すな)</td>
<td>World Appearance (Default / Grass / Tiles / Metal / Sand)</td>
</tr>
<tr>
<td>ワールドのライト (ひる / ゆうがた / よる / くらやみ / うちゅう)</td>
<td>World Lighting (Noon / Evening / Night / Pitch black / Outer space)</td>
</tr>
<tr>
<td>太陽の方向</td>
<td>Sun Direction</td>
</tr>
<tr>
<td>太陽の高度</td>
<td>Sun Height</td>
</tr>
<tr>
<td>ワールドのそざい (ふつう / ポヨポヨ / ツルツル)</td>
<td>World Material (Normal / Bouncy / Slippery)</td>
</tr>
<tr>
<td>モノのみため (ふつう / きんぞく / ネオン)</td>
<td>Object Appearance (Default / Metallic / Neon)</td>
</tr>
<tr>
<td>ふるまい (こわさない / こわす)</td>
<td>Properties (Non-destructive / Destructinve)</td>
</tr>
<tr>
<td>ワールドでモノがこわれる速度</td>
<td>Object-Destruction Speed</td>
</tr>
</tbody></table>

<h2>ゲーム画面とカメラ : Game Screen / Camera</h2>

<h3>ゲーム画面ノードン : Game-Screen Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>水平追従率</td>
<td>Horizontal Tracking Rate</td>
</tr>
<tr>
<td>上下追従率</td>
<td>Vertical Tracking Rate</td>
</tr>
<tr>
<td>カメラ画角</td>
<td>Camera Field of View</td>
</tr>
<tr>
<td>視点 (横から視点 / 上から視点)</td>
<td>Viewpoint (Side view / Overhead view)</td>
</tr>
</tbody></table>

<h3>カメラノードン : Camera Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>上下</td>
<td>⬍Up/Down</td>
</tr>
<tr>
<td>水平</td>
<td>⬌Horizontal</td>
</tr>
<tr>
<td>リセット</td>
<td>Reset</td>
</tr>
<tr>
<td>水平追従率</td>
<td>Horizontal Tracking Rate</td>
</tr>
<tr>
<td>上下追従率</td>
<td>Vertical Tracking Rate</td>
</tr>
<tr>
<td>カメラ画角</td>
<td>Camera Field of View</td>
</tr>
<tr>
<td>キャラクターY軸回転追従 (追従しない / 追従する)</td>
<td>Track Character&#39;s Y Rotation (Disable / Enable)</td>
</tr>
<tr>
<td>ずらすキョリ</td>
<td>Offset Distance</td>
</tr>
<tr>
<td>X軸回転</td>
<td>X-Axis Rotation</td>
</tr>
<tr>
<td>Y軸回転</td>
<td>Y-Axis Rotation</td>
</tr>
</tbody></table>

<h3>カメラ位置ノードン : Camera-Position Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>水平追従率</td>
<td>Horizontal Tracking Rate</td>
</tr>
<tr>
<td>上下追従率</td>
<td>Vertical Tracking Rate</td>
</tr>
<tr>
<td>ずらすキョリ</td>
<td>Offset Distance</td>
</tr>
</tbody></table>

<h3>カメラ注視点ノードン : Camera-Target Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>水平追従率</td>
<td>Horizontal Tracking Rate</td>
</tr>
<tr>
<td>上下追従率</td>
<td>Vertical Tracking Rate</td>
</tr>
<tr>
<td>ずらすキョリ</td>
<td>Offset Distance</td>
</tr>
</tbody></table>

<h3>カメラ方向ノードン : Camera-Direction Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>上下</td>
<td>⬍Up/Down</td>
</tr>
<tr>
<td>水平</td>
<td>⬌Horizontal</td>
</tr>
</tbody></table>

<h3>カメラ画角ノードン : Camera-Angle Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>カメラ画角</td>
<td>Camera Field of View</td>
</tr>
</tbody></table>

<h3>あたまノードン : Head Nodon</h3>

<p>No terms.</p>

<h3>てノードン : Hand Nodon</h3>

<table><thead>
<tr>
<th>Japanese</th>
<th>English</th>
</tr>
</thead><tbody>
<tr>
<td>つかむ</td>
<td>Grab</td>
</tr>
<tr>
<td>前後</td>
<td>⬍Forward/Backward</td>
</tr>
<tr>
<td>コントローラーばんごう (じどう)</td>
<td>Controller Number (Auto)</td>
</tr>
<tr>
<td>どっちのコントローラー？</td>
<td>Which Controller</td>
</tr>
<tr>
<td>モード (ホールド / トグル)</td>
<td>Mode (Hold / Toggle)</td>
</tr>
<tr>
<td>持ち方 (そのまま / ピッタリ)</td>
<td>Carrying Style (Precise / Snappy)</td>
</tr>
<tr>
<td>れんけつキョリ</td>
<td>Snap Distance</td>
</tr>
<tr>
<td>回転きじゅん (てくび / ひじ / かた)</td>
<td>Center of Rotation (Wrist / Elbow / Shoulder)</td>
</tr>
<tr>
<td>発射スピード</td>
<td>Launch Speed</td>
</tr>
</tbody></table>
]]></description>
		</item>

		<item>
			<title>Made a game 'BREAK THE WAY' on Game Builder Garage</title>
			<link>http://tech.nitoyon.com/en/blog/2021/10/28/break-the-way/</link>
			<guid>http://tech.nitoyon.com/en/blog/2021/10/28/break-the-way/</guid>
			<pubDate>Thu, 28 Oct 2021 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>I created a game on Game Builder Garage for Nintendo Switch.</p>

<p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/%E3%81%AF%E3%81%98%E3%82%81%E3%81%A6%E3%82%B2%E3%83%BC%E3%83%A0%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0?src=hash&amp;ref_src=twsrc%5Etfw">#はじめてゲームプログラミング</a> で上スクロールのアスレチックゲームを作ってみた。後半は来た道の破壊ゲームになるよ。<br>G 005 9TG 3PF<a href="https://twitter.com/hashtag/GameBuilderGarage?src=hash&amp;ref_src=twsrc%5Etfw">#GameBuilderGarage</a> <a href="https://twitter.com/hashtag/%E3%81%AF%E3%81%98%E3%83%97%E3%83%AD?src=hash&amp;ref_src=twsrc%5Etfw">#はじプロ</a> <a href="https://t.co/EGDBWP6zZf">pic.twitter.com/EGDBWP6zZf</a></p>&mdash; nitoyon (にとよん) (@nitoyon) <a href="https://twitter.com/nitoyon/status/1441797051986038786?ref_src=twsrc%5Etfw">September 25, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<ul>
<li>Title: <em>BREAK THE WAY</em></li>
<li>Game ID: <em>G 005 9TG 3PF</em></li>
</ul>

<h1>About the game</h1>

<p>I think this game is pretty easy because I&#39;ve adjusted the difficulty level for my children who aren&#39;t used to this kind of game.</p>

<p>You can enjoy 3 types of game in this game.</p>

<p>If you don&#39;t have a game, you can watch the following video.</p>

<div class="youtube"><iframe width="560" height="315" src="http://www.youtube.com/embed/tzQp02Upe0E"frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></div>
]]></description>
		</item>

		<item>
			<title>Calculation card app for first graders released</title>
			<link>http://tech.nitoyon.com/en/blog/2021/10/19/calc-card/</link>
			<guid>http://tech.nitoyon.com/en/blog/2021/10/19/calc-card/</guid>
			<pubDate>Tue, 19 Oct 2021 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>My child entered elementary school and is doing a little homework every day. Solving calculation cards is the most troublesome one.</p>

<p><center><img src="/ja/blog/2021/10/19/calc-card/real-card.jpg" width="400" height="250" alt="Calculation card"></center></p>

<p>I looked for an app to solve this hassle but couldn&#39;t find it.</p>

<p>So I made it!!</p>

<p>Please try my <a href="https://nitoyon.github.io/1-10calc/">Calc Card App</a>.</p>

<p><center>
<a href="https://nitoyon.github.io/1-10calc/"><img src="title.jpg" width="200" height="354" alt="title" border="1"></a><br>
<a href="https://nitoyon.github.io/1-10calc/">https://nitoyon.github.io/1-10calc/</a></center></p>

<p>This app works on browser, so it works on iPhone, iPad, Android and PC.</p>

<p>You can add to home screen to use like an real app.</p>

<h1>How to use</h1>

<p>If you tap <em>[Addition 1]</em> (Addition up to 10), you will see a screen like this:</p>

<p><center><img src="/ja/blog/2021/10/19/calc-card/q.jpg" width="200" height="356" alt="Question"></center></p>

<p>You will be praised if you choose correct answer.</p>

<p><center><img src="/ja/blog/2021/10/19/calc-card/ok.jpg" width="300" height="208" alt="Good"></center></p>

<h2>Let&#39;s check the results</h2>

<p>Back by tapping <em>[←]</em> and tap <em>[View results]</em>, You can check the results of your child&#39;s study that day.</p>

<p><center><img src="result.jpg" width="300" height="265" alt="Results"></center></p>

<h1>Try it!</h1>

<p>It was a story of solving troublesome homework using my own technology.</p>

<p>Let&#39;s enjoy! <a href="https://nitoyon.github.io/1-10calc/">https://nitoyon.github.io/1-10calc/</a></p>
]]></description>
		</item>

		<item>
			<title>Space travel animated GIF generated by Golang</title>
			<link>http://tech.nitoyon.com/en/blog/2016/01/18/space-travel-animated-gif/</link>
			<guid>http://tech.nitoyon.com/en/blog/2016/01/18/space-travel-animated-gif/</guid>
			<pubDate>Mon, 18 Jan 2016 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>I created &quot;Space travel&quot; animated GIF with Golang:</p>

<p><img src="http://img.gifmagazine.net/gifmagazine/images/704479/original.gif" width="500" height="250" alt="Space travel (463KB)"></p>

<p>Source code is at the bottom of this article. Let me explain the library I used.</p>

<h1>Using draw2d to draw image</h1>

<p>It&#39;s difficult to draw complicated figure without using external library. With <a href="https://github.com/llgcode/draw2d">draw2d</a> library, we can draw lines, arcs, bezier curves and primitive shapes. Of course, we can set line color and fill color.</p>

<p>Following code renders #808080 rectangle using <code>draw2dimg</code> and <code>draw2dkit</code>.</p>

<div class="highlight"><pre><code class="language-go" data-lang="go">package main

import (
    "github.com/llgcode/draw2d/draw2dimg"
    "github.com/llgcode/draw2d/draw2dkit"
    "image"
    "image/color"
)

func main() {
    img := image.NewRGBA(image.Rect(0, 0, 200, 200))
    gc := draw2dimg.NewGraphicContext(img)

    // Draw rectangle (#808080)
    gc.SetFillColor(color.Gray{0x80})
    draw2dkit.Rectangle(gc, 50, 50, 100, 100)
    gc.Fill()
    gc.Close()
}
</code></pre></div>

<p><code>draw2dimg.NewGraphicContext</code> function requires <code>image.RGBA</code> object, although animated gif encoder (<code>gif.EncodeAll</code>) expects <code>image.Palettted</code> to be passed.</p>

<p>So,  when we generate an animated GIF with draw2d, we have to:</p>

<ol>
<li>Create <code>image.RBGA</code> instance.</li>
<li>Draw using draw2d to the image</li>
<li>Convert <code>image.RBGA</code> to <code>image.Paletted</code></li>
<li>Call <code>gif.EncodeAll</code> with <code>[]*image.Paletted</code> in order to create animated gif</li>
</ol>

<h1>Convert image.RBGA to image.Paletted</h1>

<p><code>gif.Encode</code> automatically convert <code>image.RBGA</code> to <code>image.Paletted</code> using <code>draw.FloydSteinberg</code>, but <code>gif.EncodeAll</code> doesn&#39;t.</p>

<p>So we have to convert for our own. Let&#39;s convert using <code>draw.FloydSteinberg</code> like <code>gif.Encode</code> method:</p>

<div class="highlight"><pre><code class="language-go" data-lang="go">package main

import (
    "image"
    "image/color"
    "image/draw"
)

func main() {
    img := image.NewRGBA(image.Rect(0, 0, 200, 200))

    // Initialize palette (#ffffff, #000000, #ff0000)
    var palette color.Palette = color.Palette{}
    palette = append(palette, color.White)
    palette = append(palette, color.Black)
    palette = append(palette, color.RGBA{0xff, 0x00, 0x00, 0xff})

    // Dithering
    pm := image.NewPaletted(img.Bounds(), palette)
    draw.FloydSteinberg.Draw(pm, img.Bounds(), img, image.ZP)
}
</code></pre></div>

<h1>Full source code</h1>

<p>Here is the full source code (100 lines):</p>

<div class="highlight"><pre><code class="language-go" data-lang="go">package main

import (
    "github.com/llgcode/draw2d/draw2dimg"
    "github.com/llgcode/draw2d/draw2dkit"
    "image"
    "image/color"
    "image/draw"
    "image/gif"
    "math"
    "math/rand"
    "os"
)

var w, h float64 = 500, 250
var palette color.Palette = color.Palette{}
var zCycle float64 = 8
var zMin, zMax float64 = 1, 15

type Point struct {
    X, Y float64
}

type Circle struct {
    X, Y, Z, R float64
}

// Draw stars in order to generate perfect loop GIF
func (c *Circle) Draw(gc *draw2dimg.GraphicContext, ratio float64) {
    z := c.Z - ratio*zCycle

    for z &lt; zMax {
        if z &gt;= zMin {
            x, y, r := c.X/z, c.Y/z, c.R/z
            gc.SetFillColor(color.White)
            gc.Fill()
            draw2dkit.Circle(gc, w/2+x, h/2+y, r)
            gc.Close()
        }
        z += zCycle
    }
}

func drawFrame(circles []Circle, ratio float64) *image.Paletted {
    img := image.NewRGBA(image.Rect(0, 0, int(w), int(h)))
    gc := draw2dimg.NewGraphicContext(img)

    // Draw background
    gc.SetFillColor(color.Gray{0x11})
    draw2dkit.Rectangle(gc, 0, 0, w, h)
    gc.Fill()
    gc.Close()

    // Draw stars
    for _, circle := range circles {
        circle.Draw(gc, ratio)
    }

    // Dithering
    pm := image.NewPaletted(img.Bounds(), palette)
    draw.FloydSteinberg.Draw(pm, img.Bounds(), img, image.ZP)
    return pm
}

func main() {
    // Create 4000 stars
    circles := []Circle{}
    for len(circles) &lt; 4000 {
        x, y := rand.Float64()*8-4, rand.Float64()*8-4
        if math.Abs(x) &lt; 0.5 &amp;&amp; math.Abs(y) &lt; 0.5 {
            continue
        }
        z := rand.Float64() * zCycle
        circles = append(circles, Circle{x * w, y * h, z, 5})
    }

    // Intiialize palette (#000000, #111111, ..., #ffffff)
    palette = color.Palette{}
    for i := 0; i &lt; 16; i++ {
        palette = append(palette, color.Gray{uint8(i) * 0x11})
    }

    // Generate 30 frames
    var images []*image.Paletted
    var delays []int
    count := 30
    for i := 0; i &lt; count; i++ {
        pm := drawFrame(circles, float64(i)/float64(count))
        images = append(images, pm)
        delays = append(delays, 4)
    }

    // Output gif
    f, _ := os.OpenFile("space.gif", os.O_WRONLY|os.O_CREATE, 0600)
    defer f.Close()
    gif.EncodeAll(f, &amp;gif.GIF{
        Image: images,
        Delay: delays,
    })
}
</code></pre></div>
]]></description>
		</item>

		<item>
			<title>Generate an animated GIF with Golang</title>
			<link>http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/</link>
			<guid>http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/</guid>
			<pubDate>Thu, 07 Jan 2016 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>This article shows how to generate an animated GIF with Golang in 3 ways.</p>

<ul>
<li>Generate from static images</li>
<li>Generate from video</li>
<li>Generate programatically</li>
</ul>

<h1>Generate from static images</h1>

<p>Let&#39;s make an animated GIF from static images.</p>

<p>Supose that we have following static GIF images:</p>

<p><img src="/ja/blog/2016/01/07/go-animated-gif-gen/g1.gif" width="200" height="200">
<img src="/ja/blog/2016/01/07/go-animated-gif-gen/g2.gif" width="200" height="200">
<img src="/ja/blog/2016/01/07/go-animated-gif-gen/g3.gif" width="200" height="200"></p>

<p>We got:</p>

<p><center><img src="/ja/blog/2016/01/07/go-animated-gif-gen/gopher.gif" width="200" height="200"></center></p>

<p>This animated GIF is generated by following code:</p>

<div class="highlight"><pre><code class="language-go" data-lang="go">package main

import "image"
import "image/gif"
import "os"

func main() {
    files := []string{"g1.gif", "g2.gif","g3.gif", "g2.gif"}

    // load static image and construct outGif
    outGif := &amp;gif.GIF{}
    for _, name := range files {
        f, _ := os.Open(name)
        inGif, _ := gif.Decode(f)
        f.Close()

        outGif.Image = append(outGif.Image, inGif.(*image.Paletted))
        outGif.Delay = append(outGif.Delay, 0)
    }

    // save to out.gif
    f, _ := os.OpenFile("out.gif", os.O_WRONLY|os.O_CREATE, 0600)
    defer f.Close()
    gif.EncodeAll(f, outGif)
}
</code></pre></div>

<p>Note:</p>

<ul>
<li>Read each frame GIF image with <code>gif.Decode</code>. If we read JPEG images, we have to convert them programatically (<a href="https://github.com/srinathh/goanigiffy">goanigiffy</a> does this by calling <code>gif.Encode</code> and <code>gif.Decode</code>).</li>
<li>Call <code>gif.EncodeAll</code> to save animated GIF.</li>
</ul>

<h1>Convert video to Animated GIF</h1>

<p>Use <a href="http://www.mplayerhq.hu/">MPlayer</a> to extract frames, and create animated GIF with <a href="https://github.com/srinathh/goanigiffy">goanigiffy</a> (see <a href="http://srinathh.github.io/opensource/goanigiffy/">GoAniGiffy</a> for details).</p>

<h1>Programatically</h1>

<p>Let&#39;s generate animated GIF programatically.</p>

<p><center><img src="/ja/blog/2016/01/07/go-animated-gif-gen/rgb.gif" width="240" height="240"></center></p>

<p>Generate <code>[]*image.Paletted</code> programatically and pass it to <code>gif.EncodeAll</code>.</p>

<div class="highlight"><pre><code class="language-go" data-lang="go">    var images []*image.Paletted
    var delays []int

    // create 20 images and draw circles
    for step := 0; step &lt; 20; step++ {
        img := image.NewPaletted(image.Rect(0, 0, w, h), palette)
        images = append(images, img)
        delays = append(delays, 0)

        // drawing code (too long)
    }

    // save to rgb.gif
    f, _ := os.OpenFile("rgb.gif", os.O_WRONLY|os.O_CREATE, 0600)
    defer f.Close()
    gif.EncodeAll(f, &amp;gif.GIF{
        Image: images,
        Delay: delays,
    })

</code></pre></div>

<p>The entire code is as follows:</p>

<div class="highlight"><pre><code class="language-go" data-lang="go">package main

import (
    "image"
    "image/color"
    "image/gif"
    "math"
    "os"
)

type Circle struct {
    X, Y, R float64
}

func (c *Circle) Brightness(x, y float64) uint8 {
    var dx, dy float64 = c.X - x, c.Y - y
    d := math.Sqrt(dx*dx+dy*dy) / c.R
    if d &gt; 1 {
        return 0
    } else {
        return 255
    }
}

func main() {
    var w, h int = 240, 240
    var hw, hh float64 = float64(w / 2), float64(h / 2)
    circles := []*Circle{&amp;Circle{}, &amp;Circle{}, &amp;Circle{}}

    var palette = []color.Color{
        color.RGBA{0x00, 0x00, 0x00, 0xff},
        color.RGBA{0x00, 0x00, 0xff, 0xff},
        color.RGBA{0x00, 0xff, 0x00, 0xff},
        color.RGBA{0x00, 0xff, 0xff, 0xff},
        color.RGBA{0xff, 0x00, 0x00, 0xff},
        color.RGBA{0xff, 0x00, 0xff, 0xff},
        color.RGBA{0xff, 0xff, 0x00, 0xff},
        color.RGBA{0xff, 0xff, 0xff, 0xff},
    }

    var images []*image.Paletted
    var delays []int
    steps := 20
    for step := 0; step &lt; steps; step++ {
        img := image.NewPaletted(image.Rect(0, 0, w, h), palette)
        images = append(images, img)
        delays = append(delays, 0)

        θ := 2.0 * math.Pi / float64(steps) * float64(step)
        for i, circle := range circles {
            θ0 := 2 * math.Pi / 3 * float64(i)
            circle.X = hw - 40*math.Sin(θ0) - 20*math.Sin(θ0+θ)
            circle.Y = hh - 40*math.Cos(θ0) - 20*math.Cos(θ0+θ)
            circle.R = 50
        }

        for x := 0; x &lt; w; x++ {
            for y := 0; y &lt; h; y++ {
                img.Set(x, y, color.RGBA{
                    circles[0].Brightness(float64(x), float64(y)),
                    circles[1].Brightness(float64(x), float64(y)),
                    circles[2].Brightness(float64(x), float64(y)),
                    255,
                })
            }
        }
    }

    f, _ := os.OpenFile("rgb.gif", os.O_WRONLY|os.O_CREATE, 0600)
    defer f.Close()
    gif.EncodeAll(f, &amp;gif.GIF{
        Image: images,
        Delay: delays,
    })
}
</code></pre></div>

<p>Thank you for reading.</p>
]]></description>
		</item>

	</channel>
</rss>