<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>TECH-NI Blog</title>
		<link>http://tech.nitoyon.com/en/blog/index.xml</link>
		<description>All Technology is Boiled in This Site.</description>
		<language>en</language>
		<copyright>Copyright nitoyon.</copyright>
		<lastBuildDate>Thu, 28 Oct 2021 11:30:15 +0000</lastBuildDate>
		<docs>http://blogs.law.harvard.edu/tech/rss</docs>
		<atom:link href="http://tech.nitoyon.com/en/blog/index.xml" rel="self" type="application/rss+xml" />


		<item>
			<title>Made a game 'BREAK THE WAY' on Game Builder Garage</title>
			<link>http://tech.nitoyon.com/en/blog/2021/10/28/break-the-way/</link>
			<guid>http://tech.nitoyon.com/en/blog/2021/10/28/break-the-way/</guid>
			<pubDate>Thu, 28 Oct 2021 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>I created a game on Game Builder Garage for Nintendo Switch.</p>

<p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/%E3%81%AF%E3%81%98%E3%82%81%E3%81%A6%E3%82%B2%E3%83%BC%E3%83%A0%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0?src=hash&amp;ref_src=twsrc%5Etfw">#はじめてゲームプログラミング</a> で上スクロールのアスレチックゲームを作ってみた。後半は来た道の破壊ゲームになるよ。<br>G 005 9TG 3PF<a href="https://twitter.com/hashtag/GameBuilderGarage?src=hash&amp;ref_src=twsrc%5Etfw">#GameBuilderGarage</a> <a href="https://twitter.com/hashtag/%E3%81%AF%E3%81%98%E3%83%97%E3%83%AD?src=hash&amp;ref_src=twsrc%5Etfw">#はじプロ</a> <a href="https://t.co/EGDBWP6zZf">pic.twitter.com/EGDBWP6zZf</a></p>&mdash; nitoyon (にとよん) (@nitoyon) <a href="https://twitter.com/nitoyon/status/1441797051986038786?ref_src=twsrc%5Etfw">September 25, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<ul>
<li>Title: <em>BREAK THE WAY</em></li>
<li>Game ID: <em>G 005 9TG 3PF</em></li>
</ul>

<h1>About the game</h1>

<p>I think this game is pretty easy because I&#39;ve adjusted the difficulty level for my children who aren&#39;t used to this kind of game.</p>

<p>You can enjoy 3 types of game in this game.</p>

<p>If you don&#39;t have a game, you can watch the following video.</p>

<div class="youtube"><iframe width="560" height="315" src="http://www.youtube.com/embed/tzQp02Upe0E"frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></div>
]]></description>
		</item>

		<item>
			<title>Calculation card app for first graders released</title>
			<link>http://tech.nitoyon.com/en/blog/2021/10/19/calc-card/</link>
			<guid>http://tech.nitoyon.com/en/blog/2021/10/19/calc-card/</guid>
			<pubDate>Tue, 19 Oct 2021 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>My child entered elementary school and is doing a little homework every day. Solving calculation cards is the most troublesome one.</p>

<p><center><img src="/ja/blog/2021/10/19/calc-card/real-card.jpg" width="400" height="250" alt="Calculation card"></center></p>

<p>I looked for an app to solve this hassle but couldn&#39;t find it.</p>

<p>So I made it!!</p>

<p>Please try my <a href="https://nitoyon.github.io/1-10calc/">Calc Card App</a>.</p>

<p><center>
<a href="https://nitoyon.github.io/1-10calc/"><img src="title.jpg" width="200" height="354" alt="title" border="1"></a><br>
<a href="https://nitoyon.github.io/1-10calc/">https://nitoyon.github.io/1-10calc/</a></center></p>

<p>This app works on browser, so it works on iPhone, iPad, Android and PC.</p>

<p>You can add to home screen to use like an real app.</p>

<h1>How to use</h1>

<p>If you tap <em>[Addition 1]</em> (Addition up to 10), you will see a screen like this:</p>

<p><center><img src="/ja/blog/2021/10/19/calc-card/q.jpg" width="200" height="356" alt="Question"></center></p>

<p>You will be praised if you choose correct answer.</p>

<p><center><img src="/ja/blog/2021/10/19/calc-card/ok.jpg" width="300" height="208" alt="Good"></center></p>

<h2>Let&#39;s check the results</h2>

<p>Back by tapping <em>[←]</em> and tap <em>[View results]</em>, You can check the results of your child&#39;s study that day.</p>

<p><center><img src="result.jpg" width="300" height="265" alt="Results"></center></p>

<h1>Try it!</h1>

<p>It was a story of solving troublesome homework using my own technology.</p>

<p>Let&#39;s enjoy! <a href="https://nitoyon.github.io/1-10calc/">https://nitoyon.github.io/1-10calc/</a></p>
]]></description>
		</item>

		<item>
			<title>Space travel animated GIF generated by Golang</title>
			<link>http://tech.nitoyon.com/en/blog/2016/01/18/space-travel-animated-gif/</link>
			<guid>http://tech.nitoyon.com/en/blog/2016/01/18/space-travel-animated-gif/</guid>
			<pubDate>Mon, 18 Jan 2016 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>I created &quot;Space travel&quot; animated GIF with Golang:</p>

<p><img src="http://img.gifmagazine.net/gifmagazine/images/704479/original.gif" width="500" height="250" alt="Space travel (463KB)"></p>

<p>Source code is at the bottom of this article. Let me explain the library I used.</p>

<h1>Using draw2d to draw image</h1>

<p>It&#39;s difficult to draw complicated figure without using external library. With <a href="https://github.com/llgcode/draw2d">draw2d</a> library, we can draw lines, arcs, bezier curves and primitive shapes. Of course, we can set line color and fill color.</p>

<p>Following code renders #808080 rectangle using <code>draw2dimg</code> and <code>draw2dkit</code>.</p>

<div class="highlight"><pre><code class="language-go" data-lang="go">package main

import (
    "github.com/llgcode/draw2d/draw2dimg"
    "github.com/llgcode/draw2d/draw2dkit"
    "image"
    "image/color"
)

func main() {
    img := image.NewRGBA(image.Rect(0, 0, 200, 200))
    gc := draw2dimg.NewGraphicContext(img)

    // Draw rectangle (#808080)
    gc.SetFillColor(color.Gray{0x80})
    draw2dkit.Rectangle(gc, 50, 50, 100, 100)
    gc.Fill()
    gc.Close()
}
</code></pre></div>

<p><code>draw2dimg.NewGraphicContext</code> function requires <code>image.RGBA</code> object, although animated gif encoder (<code>gif.EncodeAll</code>) expects <code>image.Palettted</code> to be passed.</p>

<p>So,  when we generate an animated GIF with draw2d, we have to:</p>

<ol>
<li>Create <code>image.RBGA</code> instance.</li>
<li>Draw using draw2d to the image</li>
<li>Convert <code>image.RBGA</code> to <code>image.Paletted</code></li>
<li>Call <code>gif.EncodeAll</code> with <code>[]*image.Paletted</code> in order to create animated gif</li>
</ol>

<h1>Convert image.RBGA to image.Paletted</h1>

<p><code>gif.Encode</code> automatically convert <code>image.RBGA</code> to <code>image.Paletted</code> using <code>draw.FloydSteinberg</code>, but <code>gif.EncodeAll</code> doesn&#39;t.</p>

<p>So we have to convert for our own. Let&#39;s convert using <code>draw.FloydSteinberg</code> like <code>gif.Encode</code> method:</p>

<div class="highlight"><pre><code class="language-go" data-lang="go">package main

import (
    "image"
    "image/color"
    "image/draw"
)

func main() {
    img := image.NewRGBA(image.Rect(0, 0, 200, 200))

    // Initialize palette (#ffffff, #000000, #ff0000)
    var palette color.Palette = color.Palette{}
    palette = append(palette, color.White)
    palette = append(palette, color.Black)
    palette = append(palette, color.RGBA{0xff, 0x00, 0x00, 0xff})

    // Dithering
    pm := image.NewPaletted(img.Bounds(), palette)
    draw.FloydSteinberg.Draw(pm, img.Bounds(), img, image.ZP)
}
</code></pre></div>

<h1>Full source code</h1>

<p>Here is the full source code (100 lines):</p>

<div class="highlight"><pre><code class="language-go" data-lang="go">package main

import (
    "github.com/llgcode/draw2d/draw2dimg"
    "github.com/llgcode/draw2d/draw2dkit"
    "image"
    "image/color"
    "image/draw"
    "image/gif"
    "math"
    "math/rand"
    "os"
)

var w, h float64 = 500, 250
var palette color.Palette = color.Palette{}
var zCycle float64 = 8
var zMin, zMax float64 = 1, 15

type Point struct {
    X, Y float64
}

type Circle struct {
    X, Y, Z, R float64
}

// Draw stars in order to generate perfect loop GIF
func (c *Circle) Draw(gc *draw2dimg.GraphicContext, ratio float64) {
    z := c.Z - ratio*zCycle

    for z &lt; zMax {
        if z &gt;= zMin {
            x, y, r := c.X/z, c.Y/z, c.R/z
            gc.SetFillColor(color.White)
            gc.Fill()
            draw2dkit.Circle(gc, w/2+x, h/2+y, r)
            gc.Close()
        }
        z += zCycle
    }
}

func drawFrame(circles []Circle, ratio float64) *image.Paletted {
    img := image.NewRGBA(image.Rect(0, 0, int(w), int(h)))
    gc := draw2dimg.NewGraphicContext(img)

    // Draw background
    gc.SetFillColor(color.Gray{0x11})
    draw2dkit.Rectangle(gc, 0, 0, w, h)
    gc.Fill()
    gc.Close()

    // Draw stars
    for _, circle := range circles {
        circle.Draw(gc, ratio)
    }

    // Dithering
    pm := image.NewPaletted(img.Bounds(), palette)
    draw.FloydSteinberg.Draw(pm, img.Bounds(), img, image.ZP)
    return pm
}

func main() {
    // Create 4000 stars
    circles := []Circle{}
    for len(circles) &lt; 4000 {
        x, y := rand.Float64()*8-4, rand.Float64()*8-4
        if math.Abs(x) &lt; 0.5 &amp;&amp; math.Abs(y) &lt; 0.5 {
            continue
        }
        z := rand.Float64() * zCycle
        circles = append(circles, Circle{x * w, y * h, z, 5})
    }

    // Intiialize palette (#000000, #111111, ..., #ffffff)
    palette = color.Palette{}
    for i := 0; i &lt; 16; i++ {
        palette = append(palette, color.Gray{uint8(i) * 0x11})
    }

    // Generate 30 frames
    var images []*image.Paletted
    var delays []int
    count := 30
    for i := 0; i &lt; count; i++ {
        pm := drawFrame(circles, float64(i)/float64(count))
        images = append(images, pm)
        delays = append(delays, 4)
    }

    // Output gif
    f, _ := os.OpenFile("space.gif", os.O_WRONLY|os.O_CREATE, 0600)
    defer f.Close()
    gif.EncodeAll(f, &amp;gif.GIF{
        Image: images,
        Delay: delays,
    })
}
</code></pre></div>
]]></description>
		</item>

		<item>
			<title>Generate an animated GIF with Golang</title>
			<link>http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/</link>
			<guid>http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/</guid>
			<pubDate>Thu, 07 Jan 2016 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>This article shows how to generate an animated GIF with Golang in 3 ways.</p>

<ul>
<li>Generate from static images</li>
<li>Generate from video</li>
<li>Generate programatically</li>
</ul>

<h1>Generate from static images</h1>

<p>Let&#39;s make an animated GIF from static images.</p>

<p>Supose that we have following static GIF images:</p>

<p><img src="/ja/blog/2016/01/07/go-animated-gif-gen/g1.gif" width="200" height="200">
<img src="/ja/blog/2016/01/07/go-animated-gif-gen/g2.gif" width="200" height="200">
<img src="/ja/blog/2016/01/07/go-animated-gif-gen/g3.gif" width="200" height="200"></p>

<p>We got:</p>

<p><center><img src="/ja/blog/2016/01/07/go-animated-gif-gen/gopher.gif" width="200" height="200"></center></p>

<p>This animated GIF is generated by following code:</p>

<div class="highlight"><pre><code class="language-go" data-lang="go">package main

import "image"
import "image/gif"
import "os"

func main() {
    files := []string{"g1.gif", "g2.gif","g3.gif", "g2.gif"}

    // load static image and construct outGif
    outGif := &amp;gif.GIF{}
    for _, name := range files {
        f, _ := os.Open(name)
        inGif, _ := gif.Decode(f)
        f.Close()

        outGif.Image = append(outGif.Image, inGif.(*image.Paletted))
        outGif.Delay = append(outGif.Delay, 0)
    }

    // save to out.gif
    f, _ := os.OpenFile("out.gif", os.O_WRONLY|os.O_CREATE, 0600)
    defer f.Close()
    gif.EncodeAll(f, outGif)
}
</code></pre></div>

<p>Note:</p>

<ul>
<li>Read each frame GIF image with <code>gif.Decode</code>. If we read JPEG images, we have to convert them programatically (<a href="https://github.com/srinathh/goanigiffy">goanigiffy</a> does this by calling <code>gif.Encode</code> and <code>gif.Decode</code>).</li>
<li>Call <code>gif.EncodeAll</code> to save animated GIF.</li>
</ul>

<h1>Convert video to Animated GIF</h1>

<p>Use <a href="http://www.mplayerhq.hu/">MPlayer</a> to extract frames, and create animated GIF with <a href="https://github.com/srinathh/goanigiffy">goanigiffy</a> (see <a href="http://srinathh.github.io/opensource/goanigiffy/">GoAniGiffy</a> for details).</p>

<h1>Programatically</h1>

<p>Let&#39;s generate animated GIF programatically.</p>

<p><center><img src="/ja/blog/2016/01/07/go-animated-gif-gen/rgb.gif" width="240" height="240"></center></p>

<p>Generate <code>[]*image.Paletted</code> programatically and pass it to <code>gif.EncodeAll</code>.</p>

<div class="highlight"><pre><code class="language-go" data-lang="go">    var images []*image.Paletted
    var delays []int

    // create 20 images and draw circles
    for step := 0; step &lt; 20; step++ {
        img := image.NewPaletted(image.Rect(0, 0, w, h), palette)
        images = append(images, img)
        delays = append(delays, 0)

        // drawing code (too long)
    }

    // save to rgb.gif
    f, _ := os.OpenFile("rgb.gif", os.O_WRONLY|os.O_CREATE, 0600)
    defer f.Close()
    gif.EncodeAll(f, &amp;gif.GIF{
        Image: images,
        Delay: delays,
    })

</code></pre></div>

<p>The entire code is as follows:</p>

<div class="highlight"><pre><code class="language-go" data-lang="go">package main

import (
    "image"
    "image/color"
    "image/gif"
    "math"
    "os"
)

type Circle struct {
    X, Y, R float64
}

func (c *Circle) Brightness(x, y float64) uint8 {
    var dx, dy float64 = c.X - x, c.Y - y
    d := math.Sqrt(dx*dx+dy*dy) / c.R
    if d &gt; 1 {
        return 0
    } else {
        return 255
    }
}

func main() {
    var w, h int = 240, 240
    var hw, hh float64 = float64(w / 2), float64(h / 2)
    circles := []*Circle{&amp;Circle{}, &amp;Circle{}, &amp;Circle{}}

    var palette = []color.Color{
        color.RGBA{0x00, 0x00, 0x00, 0xff},
        color.RGBA{0x00, 0x00, 0xff, 0xff},
        color.RGBA{0x00, 0xff, 0x00, 0xff},
        color.RGBA{0x00, 0xff, 0xff, 0xff},
        color.RGBA{0xff, 0x00, 0x00, 0xff},
        color.RGBA{0xff, 0x00, 0xff, 0xff},
        color.RGBA{0xff, 0xff, 0x00, 0xff},
        color.RGBA{0xff, 0xff, 0xff, 0xff},
    }

    var images []*image.Paletted
    var delays []int
    steps := 20
    for step := 0; step &lt; steps; step++ {
        img := image.NewPaletted(image.Rect(0, 0, w, h), palette)
        images = append(images, img)
        delays = append(delays, 0)

        θ := 2.0 * math.Pi / float64(steps) * float64(step)
        for i, circle := range circles {
            θ0 := 2 * math.Pi / 3 * float64(i)
            circle.X = hw - 40*math.Sin(θ0) - 20*math.Sin(θ0+θ)
            circle.Y = hh - 40*math.Cos(θ0) - 20*math.Cos(θ0+θ)
            circle.R = 50
        }

        for x := 0; x &lt; w; x++ {
            for y := 0; y &lt; h; y++ {
                img.Set(x, y, color.RGBA{
                    circles[0].Brightness(float64(x), float64(y)),
                    circles[1].Brightness(float64(x), float64(y)),
                    circles[2].Brightness(float64(x), float64(y)),
                    255,
                })
            }
        }
    }

    f, _ := os.OpenFile("rgb.gif", os.O_WRONLY|os.O_CREATE, 0600)
    defer f.Close()
    gif.EncodeAll(f, &amp;gif.GIF{
        Image: images,
        Delay: delays,
    })
}
</code></pre></div>

<p>Thank you for reading.</p>
]]></description>
		</item>

		<item>
			<title>Generate an image programmatically with Golang</title>
			<link>http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/</link>
			<guid>http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/</guid>
			<pubDate>Thu, 31 Dec 2015 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>Golang makes it easy to generate an image using image package. We don&#39;t have to build imagemagick nor GD. Just use golang.</p>

<p>But, image package offers us a method for changing color of a pixel. If we want to draw lines or paint colors, we have to use other libraries such as <a href="https://github.com/llgcode/draw2d">draw2d</a>.</p>

<p>This article shows how to generate an image only using standard library.</p>

<h1>Simplest Example</h1>

<p>First, let&#39;s make a simple image.</p>

<div class="highlight"><pre><code class="language-go" data-lang="go">package main

import "image"
import "image/color"
import "image/png"
import "os"

func main() {
    // Create an 100 x 50 image
    img := image.NewRGBA(image.Rect(0, 0, 100, 50))

    // Draw a red dot at (2, 3)
    img.Set(2, 3, color.RGBA{255, 0, 0, 255})

    // Save to out.png
    f, _ := os.OpenFile("out.png", os.O_WRONLY|os.O_CREATE, 0600)
    defer f.Close()
    png.Encode(f, img)
}
</code></pre></div>

<h1>More Complecated Example</h1>

<p>Then, let&#39;s make more complected image!</p>

<p><center><img src="/ja/blog/2015/12/31/go-image-gen/rgb1.png" width="280" height="240"></center></p>

<p>The code is as follows:</p>

<div class="highlight"><pre><code class="language-go" data-lang="go">package main

import (
    "fmt"
    "image"
    "image/color"
    "image/png"
    "math"
    "os"
)

type Circle struct {
    X, Y, R float64
}

func (c *Circle) Brightness(x, y float64) uint8 {
    var dx, dy float64 = c.X - x, c.Y - y
    d := math.Sqrt(dx*dx+dy*dy) / c.R
    if d &gt; 1 {
        return 0
    } else {
        return 255
    }
}

func main() {
    var w, h int = 280, 240
    var hw, hh float64 = float64(w / 2), float64(h / 2)
    r := 40.0
    θ := 2 * math.Pi / 3
    cr := &amp;Circle{hw - r*math.Sin(0), hh - r*math.Cos(0), 60}
    cg := &amp;Circle{hw - r*math.Sin(θ), hh - r*math.Cos(θ), 60}
    cb := &amp;Circle{hw - r*math.Sin(-θ), hh - r*math.Cos(-θ), 60}

    m := image.NewRGBA(image.Rect(0, 0, w, h))
    for x := 0; x &lt; w; x++ {
        for y := 0; y &lt; h; y++ {
            c := color.RGBA{
                cr.Brightness(float64(x), float64(y)),
                cg.Brightness(float64(x), float64(y)),
                cb.Brightness(float64(x), float64(y)),
                255,
            }
            m.Set(x, y, c)
        }
    }

    f, err := os.OpenFile("rgb.png", os.O_WRONLY|os.O_CREATE, 0600)
    if err != nil {
        fmt.Println(err)
        return
    }
    defer f.Close()
    png.Encode(f, m)
}
</code></pre></div>

<p>We define <code>Circle</code> struct, and determine color by calling its <code>Brightness</code> method.</p>

<div class="highlight"><pre><code class="language-go" data-lang="go">c := color.RGBA{
    cr.Brightness(float64(x), float64(y)),
    cg.Brightness(float64(x), float64(y)),
    cb.Brightness(float64(x), float64(y)),
    255,
}
</code></pre></div>

<p><code>Brightness</code> returns <code>255</code> when (x, y) is in red circle and returns <code>0</code> when not.</p>

<h1>Blur Circles</h1>

<p>Finally, let&#39;s blur circles.</p>

<p><center><img src="/ja/blog/2015/12/31/go-image-gen/rgb2.png" width="280" height="240"></center></p>

<p>We only modified <code>return 255</code> to <code>uint8((1 - math.Pow(d, 5)) * 255)</code>.</p>

<div class="highlight"><pre><code class="language-go" data-lang="go">func (c *Circle) Brightness(x, y float64) uint8 {
    var dx, dy float64 = c.X - x, c.Y - y
    d := math.Sqrt(dx*dx+dy*dy) / c.R
    if d &gt; 1 {
        // outside
        return 0
    } else {
        // inside
        return uint8((1 - math.Pow(d, 5)) * 255)
    }
}
</code></pre></div>
]]></description>
		</item>

	</channel>
</rss>